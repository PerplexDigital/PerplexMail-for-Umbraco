using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Umbraco.Forms.Core;
using Umbraco.Forms.Core.Enums;
using System.Text.RegularExpressions;
using System.IO;
using Umbraco.Forms.Data.Storage;
using System.Web.Hosting;

namespace PerplexMail.UmbracoForms
{
    public class EmailWorkflow : Umbraco.Forms.Core.WorkflowType
    {
        public EmailWorkflow()
        {
            this.Name = "Send PerplexMail";
            this.Id = new Guid("A6A2C4F6-CF89-11DE-1045-5BB025383108");
            this.Description = "Sends an PerplexMail email";
        }

        [Umbraco.Forms.Core.Attributes.Setting("Email", description = "The email that should be sent", view = "Pickers.Content")]
        public string Email { get; set; }

        [Umbraco.Forms.Core.Attributes.Setting("Attachments", description = "If checked, uploaded files will be added to the e-mail as attachments", view = "CheckBox")]
        public string Attachments { get; set; }

        // Guids van de mogelijke datatypes van de velden
        // Guid kan niet als const worden gedeclareerd
        // Deze kunnen helaas niet uit een of andere Umbraco assembly worden geplukt
        // voor zover ik weet, daarmo staan ze hier (+ we hebben eigen Guids van Perplex Image/File Upload)
        private readonly Guid Guid_Checkbox = new Guid("D5C0C390-AE9A-11DE-A69E-666455D89593");
        private readonly Guid Guid_CheckboxList = new Guid("FAB43F20-A6BF-11DE-A28F-9B5755D89593");
        private readonly Guid Guid_DatePicker = new Guid("F8B4C3B8-AF28-11DE-9DD8-EF5956D89593");
        private readonly Guid Guid_DropDownList = new Guid("0DD29D42-A6A5-11DE-A2F2-222256D89593");
        private readonly Guid Guid_FileUpload = new Guid("84A17CF8-B711-46a6-9840-0E4A072AD000");
        private readonly Guid Guid_HiddenField = new Guid("DA206CAE-1C52-434E-B21A-4A7C198AF877");
        private readonly Guid Guid_Password = new Guid("FB37BC60-D41E-11DE-AEAE-37C155D89593");
        private readonly Guid Guid_RadioButtonList = new Guid("903DF9B0-A78C-11DE-9FC1-DB7A56D89593");
        private readonly Guid Guid_Recaptcha = new Guid("4A2E8E12-9613-4720-9BCD-F9871262D6AC");
        private readonly Guid Guid_Text = new Guid("e3fbf6c4-f46c-495e-aff8-4b3c227b4a98");
        private readonly Guid Guid_TextArea = new Guid("023F09AC-1445-4bcb-B8FA-AB49F33BD046");
        private readonly Guid Guid_TextField = new Guid("3F92E01B-29E2-4a30-BF33-9DF5580ED52C");
        private readonly Guid Guid_PerplexImageUpload = new Guid("11fff56b-7e0e-4bfc-97ba-b5126158d33d");
        private readonly Guid Guid_PerplexFileUpload = new Guid("3e170f26-1fcb-4f60-b5d2-1aa2723528fd");

        public override WorkflowExecutionStatus Execute(Record record, RecordEventArgs e)
        {
            var emailTags = new List<EmailTag>();

            // Add record id
            emailTags.Add(new EmailTag("[#recordId#]", record.Id.ToString()));

            List<EmailTag> allTags = record
                .RecordFields
                .Values
                .SelectMany(ParseRecordField)
                .ToList();

            // We voegen ook een speciale tag toe met daarin alle labels en waardes
            var autogeneratedForm = string.Join("<br/><br/>", allTags.Select(et => "<strong>" + et.Tag + "</strong>: " + et.Value));

            // Alle losse tags
            emailTags.AddRange(allTags);

            // En de tag met daarin alle labels en waardes
            emailTags.Add(new EmailTag("[#formsautogenerate#]", autogeneratedForm));

            bool sendAttachments = false;
            bool.TryParse(Attachments, out sendAttachments);

            emailTags.Add(new EmailTag("[#attachments#]", sendAttachments));

            // Dit gaat sowieso goed, geen TryParse nodig (zie ValidateSettings)
            int emailId = int.Parse(Email);

            List<RecordField> fileUploads = record.RecordFields.Values.Where(IsFileUpload).ToList();

            // Moeten we geüploadde bestanden als bijlage meesturen?
            // Alleen checken als we uberhaupt fileuploads in deze form hebben zitten
            if (fileUploads.Any() && sendAttachments)
            {
                var attachments = new List<Attachment>();

                foreach (var fileUpload in fileUploads)
                {
                    // De file uploads zijn van het type "multiple",
                    // dus er kunnen meerdere bestanden worden geüpload,
                    // stuur ze allemaal mee als bijlage
                    foreach (var file in fileUpload.Values.Where(v => v != null).Select(v => v.ToString()))
                    {
                        var relativePath = file;

                        // PerplexMail claimt dat het een relatief pad mag zijn,
                        // maar dat werkt voor geen meter dus we gaan het wel makkelijk maken
                        try
                        {
                            var absolutePath = HostingEnvironment.MapPath(relativePath);
                            attachments.Add(new Attachment(absolutePath));
                        }
                        catch (Exception)
                        {
                            // Voor nu negeren we een eventuele fout en gaan door met de rest
                        }
                    }
                }

                PerplexMail.Email.SendUmbracoEmail(emailId, emailTags, attachments);
            }
            else
            {
                PerplexMail.Email.SendUmbracoEmail(emailId, emailTags);
            }

            return WorkflowExecutionStatus.Completed;


            // DK @ 2016-01-28
            // Wat is dit!?
            // Graag even wat commentaar erbij zetten want ik heb
            // geen flauw idee waarom deze zooi hier staat :) ->

            //#region Encrypt
            //// Update values
            //foreach (RecordField rf in record.RecordFields.Values)
            //{
            //    var fieldValue = rf.ValuesAsString();

            //    rf.Values[0] = PerplexMail.Security.Encrypt(rf.ValuesAsString());

            //    fieldValue = rf.ValuesAsString();
            //}

            //// Save
            //RecordStorage rs = new RecordStorage();
            //record.State = FormState.Approved;
            //rs.UpdateRecord(record, e.Form);
            //rs.UpdateRecordXml(record, e.Form);
            //#endregion
        }

        private bool IsFileUpload(RecordField r)
        {
            return
                r.Field.FieldTypeId == Guid_FileUpload ||
                r.Field.FieldTypeId == Guid_PerplexFileUpload ||
                r.Field.FieldTypeId == Guid_PerplexImageUpload;
        }

        /// <summary>
        /// Dit levert een List van EmailTags op omdat sommige RecordFields tot meerdere
        /// EmailTags leiden. Bijvoorbeeld een File Upload is standaard type multiple, dus kan leiden
        /// tot meer dan 1 EmailTag ([#file-1#], [#file-2#], etc.). Het was dus noodzakelijk hier
        /// meerdere EmailTags op te kunnen leveren per RecordField.
        /// </summary>
        /// <param name="recordField"></param>
        /// <returns></returns>
        private List<EmailTag> ParseRecordField(RecordField recordField)
        {
            string tag = "[#" + recordField.Field.Caption + "#]";

            // Over het algemeen hebben we de eerste waarde nodig, we handelen hier meteen
            // de case af dat de waarde niet is meegestuurd en/of null is.
            string value = recordField.Values.Count == 0 || recordField.Values[0] == null
                ? ""
                : recordField.Values[0].ToString();

            // Hoe we de value uitlezen is afhankelijk van het datatype
            // Guids kunnen niet in een switch staan, dus we gebruiken simpelweg if / else statements
            Guid fieldTypeId = recordField.Field.FieldTypeId;

            if(fieldTypeId == Guid_Checkbox)
            {
                // Bij een checkbox gaat het om een boolean waarde, deze geven we dus ook als zodanig terug en niet als string
                return new List<EmailTag>() { new EmailTag(tag, bool.Parse(value)) };
            }
            else if(fieldTypeId == Guid_TextArea)
            {
                // Newlines vervangen door HTMl newlines
                value = value.Replace("\n", "<br/>");
            }
            else if(fieldTypeId == Guid_DatePicker)
            {
                // De .ToString van de DateTime moeten we wellicht instelbaar maken in de WorkFlow
                // Dan kan je per formulier aangeven hoe de datum naar een string moet worden omgezet
                if (value != "")
                {
                    DateTime dateTime;
                    if (DateTime.TryParse(value, out dateTime))
                    {
                        value = dateTime.ToShortDateString();
                    }
                    else
                    {
                        value = "The DatePicker value could not be parsed into a DateTime instance. The DatePicker value was " + value;
                    }
                }
            }
            else if(IsFileUpload(recordField))
            {
                // Een FileUpload kan meerdere waardes hebben (voor elk geüpload bestand)
                // We gaan nog steeds 1 tag genereren, maar die kan dan dus meerdere linkjes
                // bevatten, 1 voor elk bestand.

                // Lijstje met <a href="...">'s
                List<string> links = recordField.Values.Select((filePath, idx) =>
                {
                    // filePath is een relatief pad, iets als "~/media/forms/upload/<GUID>/bestandsnaam.txt
                    string fileName = Path.GetFileName(filePath.ToString());

                    var httpContext = HttpContext.Current;
                    string host = ""; // Root van website
                    if (httpContext != null)
                    {
                        host = httpContext.Request.Url.GetLeftPart(UriPartial.Authority);
                    }
                    string url = host + filePath.ToString().Replace("~", "");

                    string link = "<a title=\"" + fileName + "\" href=\"" + url + "\">" + fileName + "</a>";

                    // Eerder hadden we losse tags voor Bestandsnaam en URL,
                    // maar in de praktijk zijn die niet zinnig om terug te geven
                    // want in de formsautogenerate toont hij alle tags + values.
                    // Daar willen we echter alleen maar een aanklikbare link en niet
                    // ook nog los bestandsnaam + url.
                    // Nu dus alleen nog een anchor tag met aanklikbare link
                    return link;
                }).ToList();

                string htmlValue;

                // Indien het 1 bestand is leveren we 1 <a> tag op, verder niets.
                // Indien er meer dan 1 bestand is zetten we er enters tussen en doen we
                // ook een enter voor het eerste bestand zodat we een lijstje onder elkaar krijgen.
                if (links.Count == 1)
                {
                    htmlValue = links.First();
                }
                else
                {
                    htmlValue = "<br/>" + string.Join("<br/>", links);
                }

                return new List<EmailTag>() { new EmailTag("[#" + recordField.Field.Caption + "#]", htmlValue) };
            }

            // Default case voor de overige waardes:
            // Value wordt de stringwaarde (bij 1 waarde),
            // ofwel een kommagescheiden lijst van de stringwaardes (bij 2+ waardes)
            else
            {
                value = string.Join(", ", recordField.Values.Where(v => v != null).Select(v => v.ToString()));
            }

            return new List<EmailTag>() { new EmailTag(tag, value) };
        }

        public override List<Exception> ValidateSettings()
        {
            var exceptions = new List<Exception>();
            int emailId = 0;
            if (!int.TryParse(Email, out emailId))
            {
                exceptions.Add(new Exception("No email node has been selected"));
            }

            return exceptions;
        }
    }
}
